services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
     - /opt/authentik/authentik.env
    environment:
      POSTGRES_PASSWORD: ${PG_PASS}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_DB: ${PG_DB}
    networks:
      - authentik-internal
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis_data:/data
    networks:
      - authentik-internal
  authentik-proxy:
    image: ghcr.io/goauthentik/server:${AUTHENTIK_VERSION}
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - "9000"
      - "9443"
    command: server
    env_file:
     - /opt/authentik/authentik.env
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
      AUTHENTIK_EMAIL__PORT: "587"
      AUTHENTIK_EMAIL__HOST: ${SMTP_HOST}
      AUTHENTIK_EMAIL__USERNAME: ${SMTP_USERNAME}
      AUTHENTIK_EMAIL__PASSWORD: ${SMTP_PASSWORD}
      AUTHENTIK_EMAIL__USE_TLS: "true"
      AUTHENTIK_EMAIL__FROM: ${EMAIL_FROM}
      AUTHENTIK_EMAIL__TIMEOUT: "10"
    volumes:
      - media_data:/media
      - custom_templates:/templates
    depends_on:
      - postgresql
      - redis
    networks:
      - traefik-public
      - authentik-internal
    labels:
      - traefik.enable=true
      - traefik.docker.network=traefik-public
      - traefik.constraint-label=traefik-public
      # HTTP router (redirects to HTTPS)
      - traefik.http.routers.authentik.rule=Host(`authentik.monadical.io`) || HostRegexp(`{subdomain:[A-Za-z0-9](?:[A-Za-z0-9\-]{0,61}[A-Za-z0-9])?}.monadical.io`) && PathPrefix(`/outpost.goauthentik.io/`)
      - traefik.http.routers.authentik.entrypoints=http
      - traefik.http.routers.authentik.middlewares=redirect-to-https
      - traefik.http.services.authentik.loadbalancer.server.port=9000
      # HTTPS router
      - traefik.http.routers.authentik-https.rule=Host(`authentik.monadical.io`) || HostRegexp(`{subdomain:[A-Za-z0-9](?:[A-Za-z0-9\-]{0,61}[A-Za-z0-9])?}.monadical.io`) && PathPrefix(`/outpost.goauthentik.io/`)
      - traefik.http.routers.authentik-https.entrypoints=https
      - traefik.http.routers.authentik-https.tls=true
      - traefik.http.routers.authentik-https.tls.certresolver=le
      # HTTPS redirect middleware
      - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
      - traefik.http.middlewares.redirect-to-https.redirectscheme.permanent=true
      # Forward auth configuration
      - traefik.http.middlewares.authentik.forwardauth.address=http://authentik-proxy:9000/outpost.goauthentik.io/auth/traefik
      - traefik.http.middlewares.authentik.forwardauth.trustForwardHeader=true
      - traefik.http.middlewares.authentik.forwardauth.authResponseHeaders=X-authentik-username,X-authentik-groups,X-authentik-email,X-authentik-name,X-authentik-uid,X-authentik-jwt,X-authentik-meta-jwks,X-authentik-meta-outpost,X-authentik-meta-provider,X-authentik-meta-app,X-authentik-meta-version
  worker:
    env_file:
     - /opt/authentik/authentik.env
    image: ghcr.io/goauthentik/server:${AUTHENTIK_VERSION}
    restart: unless-stopped
    deploy:
      placement:
        constraints:
          - node.role == manager
    command: worker
    user: root
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
      AUTHENTIK_SECRET_KEY: ${AUTHENTIK_SECRET_KEY}
    volumes:
      - certs_data:/certs
      - media_data:/media
      - custom_templates:/templates
    depends_on:
      - postgresql
      - redis      
    networks:
      - traefik-public
      - authentik-internal

volumes:
  postgres_data:
  redis_data:
  media_data:
  certs_data:
  custom_templates:

networks:
  traefik-public:
    external: true
  authentik-internal:
    internal: true